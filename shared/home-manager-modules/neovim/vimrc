" --- VIM SETTINGS ---
filetype plugin indent on
syntax on

:scriptencoding utf-8
set completeopt+=longest
set completeopt-=preview
set expandtab
set hidden
set lbr
set mouse=a
set nomodeline
set noswapfile
set number
set path=**
set updatetime=100  " ensures gitgutter updates every 100ms
set shiftround
set shiftwidth=2
set splitbelow
set splitright
set tabstop=2
set termguicolors
set wildignorecase
set colorcolumn=81
set clipboard=unnamedplus

let &showbreak = '↪ '
let g:netrw_liststyle=1
let g:mapleader=' '
let g:maplocalleader='\'

colorscheme nord
set background=dark
let g:lightline = { 'colorscheme': 'nord' }

tnoremap <C-O> <C-\><C-n><C-O>

autocmd BufNewFile,BufRead *.pl :set ft=prolog

" --- GOYO ---
function! s:goyo_enter()
  set spell spelllang=en_us
endfunction

function! s:goyo_leave()
  set nospell
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()


" --- ALE ---
let g:ale_elm_make_use_global=1
let g:ale_linters_explicit = 1
let g:ale_linters = { 'haskell': ['hlint'], 'elm': ['make'], 'nim': ['nimcheck'] }
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '!'

augroup customCommands
  autocmd!
  nmap <silent> <localleader>e <Plug>(ale_detail)
  autocmd BufWritePre * Neoformat

  " don't show fzf statusline
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END


" --- POLYGLOT ---
let g:polyglot_disabled = ['haskell', 'markdown']


" --- ELM (POLYGLOT) ---
let g:elm_format_autosave = 0
let g:elm_make_show_warnings = 1
let g:elm_setup_keybindings = 0


" --- NEOFORMAT ---
let g:neoformat_enabled_nix = ['nixfmt']
let g:neoformat_nix_nixfmt = {
  \ 'exe': 'nixfmt',
  \ 'stdin': 1,
  \ }

let g:neoformat_enabled_haskell = ['ormolu']
let g:neoformat_haskell_ormolu = {
  \ 'exe': 'ormolu',
  \ 'stdin': 1,
  \ }

let g:neoformat_enabled_ruby = []
let g:neoformat_enabled_rust = []
let g:neoformat_enabled_sql = []
let g:neoformat_enabled_yaml = []
let g:neoformat_enabled_json = []
let g:neoformat_enabled_html = []
let g:neoformat_basic_format_retab = 1


" --- TRIM ON SAVE
autocmd BufWritePre * :%s/\s\+$//e


" --- FZF ---
let g:fzf_layout = { 'window': 'enew' }
let $FZF_DEFAULT_OPTS .= ' --no-height' " fixes fzf in nvim terminals


" --- SEARCHING FILES ---
nnoremap <C-P> :Files<cr>
nnoremap <C-B> :Buffers<CR>

command! -bang -nargs=? -complete=dir Files
  \ call fzf#run(fzf#wrap({"source": $FZF_DEFAULT_COMMAND . " \| similar-sort " . (@% == '' ? 'a' : @%),
                         \ "sink": "edit",
                         \ "options": "--tiebreak index"
                         \ }))

" --- DIRVISH ---

augroup dirvish_config
  autocmd!

  " Undo Dirvish' default binding of <C-P>
  autocmd FileType dirvish silent! unmap <buffer> <C-P>
augroup END

" --- FILE SEARCH ---

" <leader>g takes a motion, then searches for the text covered by the motion.
nnoremap <silent> <leader>g :set opfunc=SearchMotion<cr>g@
vnoremap <silent> <leader>g :<C-U>call SearchMotion(visualmode(), 1)<CR>
function! SearchMotion(type, ...)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @@

  if a:0  " Invoked from Visual mode, use '< and '> marks.
    silent exe "normal! `<" . a:type . "`>y"
  elseif a:type == 'line'
    silent exe "normal! '[V']y"
  elseif a:type == 'block'
    silent exe "normal! `[\<C-V>`]y"
  else
    silent exe "normal! `[v`]y"
  endif

  let @/ = @@
  exe "normal /\<cr>"

  let &selection = sel_save
  let @@ = reg_save
endfunction


" --- CROSS-PROJECT GREP ---
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>).'| tr -d "\017"', 1,
  \   { 'options': '--bind ctrl-a:select-all,ctrl-d:deselect-all' },
  \   <bang>0)

" <leader>G takes a motion, then searches for the text covered by the motion
" using :Rg.
nnoremap <silent> <leader>G :set opfunc=ProjectGrepMotion<cr>g@
vnoremap <silent> <leader>G :<C-U>call ProjectGrepMotion(visualmode(), 1)<CR>
function! ProjectGrepMotion(type, ...)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @@

  if a:0  " Invoked from Visual mode, use '< and '> marks.
    silent exe "normal! `<" . a:type . "`>y"
  elseif a:type == 'line'
    silent exe "normal! '[V']y"
  elseif a:type == 'block'
    silent exe "normal! `[\<C-V>`]y"
  else
    silent exe "normal! `[v`]y"
  endif

  exe 'Rg '.@@

  let &selection = sel_save
  let @@ = reg_save
endfunction
